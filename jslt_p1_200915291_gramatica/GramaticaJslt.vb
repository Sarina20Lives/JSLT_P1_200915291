'Generated by the GOLD Parser Builder

Option Explicit On
Option Strict Off

Imports System.IO
Imports System.Windows.Forms


Module MyParser
    Private Parser As New GOLD.Parser
    'false = json, true = jslt
    Public analisis As Boolean = False
    Public direccion As String = ""
    Public raizJsl As Nodo
    Public raizJson As PtrJson

    Private Enum SymbolIndex
        [Eof] = 0                                 ' (EOF)
        [Error] = 1                               ' (Error)
        [Comment] = 2                             ' Comment
        [Newline] = 3                             ' NewLine
        [Whitespace] = 4                          ' Whitespace
        [Numnum] = 5                              ' '##'
        [Numtimes] = 6                            ' '#*'
        [Timesnum] = 7                            ' '*#'
        [Minus] = 8                               ' '-'
        [Minusminus] = 9                          ' '--'
        [Exclam] = 10                             ' '!'
        [Exclamampamp] = 11                       ' '!&&'
        [Exclampipepipe] = 12                     ' '!||'
        [Exclamnulo] = 13                         ' '!¡'
        [Exclameq] = 14                           ' '!='
        [Percent] = 15                            ' '%'
        [Ampamp] = 16                             ' '&&'
        [Amppipe] = 17                            ' '&|'
        [Ampgt] = 18                              ' '&gt'
        [Ampgte] = 19                             ' '&gte'
        [Amplt] = 20                              ' '&lt'
        [Amplte] = 21                             ' '&lte'
        [Lparen] = 22                             ' '('
        [Rparen] = 23                             ' ')'
        [Times] = 24                              ' '*'
        [Comma] = 25                              ' ','
        [Dot] = 26                                ' '.'
        [Dotdot] = 27                             ' '..'
        [Divgt] = 28                              ' '/>'
        [Colon] = 29                              ' ':'
        [At] = 30                                 ' '@'
        [Atat] = 31                               ' '@@'
        [Lbracket] = 32                           ' '['
        [Rbracket] = 33                           ' ']'
        [Caret] = 34                              ' '^'
        [Lbrace] = 35                             ' '{'
        [Pipepipe] = 36                           ' '||'
        [Rbrace] = 37                             ' '}'
        [Plus] = 38                               ' '+'
        [Plusplus] = 39                           ' '++'
        [Pluseq] = 40                             ' '+='
        [Ltdivbgt] = 41                           ' '</b>'
        [Ltdivbodygt] = 42                        ' '</body>'
        [Ltdivh1gt] = 43                          ' '</h1>'
        [Ltdivh2gt] = 44                          ' '</h2>'
        [Ltdivh3gt] = 45                          ' '</h3>'
        [Ltdivh4gt] = 46                          ' '</h4>'
        [Ltdivh5gt] = 47                          ' '</h5>'
        [Ltdivh6gt] = 48                          ' '</h6>'
        [Ltdivheadgt] = 49                        ' '</head>'
        [Ltdivhtmlgt] = 50                        ' '</html>'
        [Ltdivigt] = 51                           ' '</i>'
        [Ltdivjslcoloncualquierminusotrogt] = 52  ' '</jsl:cualquier-otro>'
        [Ltdivjslcolondegt] = 53                  ' '</jsl:de>'
        [Ltdivjslcolonenminuscasogt] = 54         ' '</jsl:en-caso>'
        [Ltdivjslcolonfinalgt] = 55               ' '</jsl:final>'
        [Ltdivjslcolonifgt] = 56                  ' '</jsl:if>'
        [Ltdivjslcolonparaminuscadagt] = 57       ' '</jsl:para-cada>'
        [Ltdivjslcolonplantillagt] = 58           ' '</jsl:plantilla>'
        [Ltdivpgt] = 59                           ' '</p>'
        [Ltdivtablegt] = 60                       ' '</table>'
        [Ltdivtdgt] = 61                          ' '</td>'
        [Ltdivthgt] = 62                          ' '</th>'
        [Ltdivtitlegt] = 63                       ' '</title>'
        [Ltdivtrgt] = 64                          ' '</tr>'
        [Ltbgt] = 65                              ' '<b>'
        [Ltbodygt] = 66                           ' '<body>'
        [Lth1gt] = 67                             ' '<h1>'
        [Lth2gt] = 68                             ' '<h2>'
        [Lth3gt] = 69                             ' '<h3>'
        [Lth4gt] = 70                             ' '<h4>'
        [Lth5gt] = 71                             ' '<h5>'
        [Lth6gt] = 72                             ' '<h6>'
        [Ltheadgt] = 73                           ' '<head>'
        [Lthtmlgt] = 74                           ' '<html>'
        [Ltigt] = 75                              ' '<i>'
        [Ltjslcolonasignar] = 76                  ' '<jsl:asignar'
        [Ltjslcoloncualquierminusotrogt] = 77     ' '<jsl:cualquier-otro>'
        [Ltjslcolonde] = 78                       ' '<jsl:de'
        [Ltjslcolonenminuscasogt] = 79            ' '<jsl:en-caso>'
        [Ltjslcolonif] = 80                       ' '<jsl:if'
        [Ltjslcolonparaminuscada] = 81            ' '<jsl:para-cada'
        [Ltjslcolonplantilla] = 82                ' '<jsl:plantilla'
        [Ltjslcolonplantillaminusaplicar] = 83    ' '<jsl:plantilla-aplicar'
        [Ltjslcolontransformacion] = 84           ' '<jsl:transformacion'
        [Ltjslcolonvalorminusde] = 85             ' '<jsl:valor-de'
        [Ltjslcolonvariable] = 86                 ' '<jsl:variable'
        [Ltpgt] = 87                              ' '<p>'
        [Lttable] = 88                            ' '<table'
        [Lttd] = 89                               ' '<td'
        [Ltth] = 90                               ' '<th'
        [Lttitlegt] = 91                          ' '<title>'
        [Lttr] = 92                               ' '<tr'
        [Eq] = 93                                 ' '='
        [Eqeq] = 94                               ' '=='
        [Gt] = 95                                 ' '>'
        [Bgcolor] = 96                            ' bgcolor
        [Boolean] = 97                            ' boolean
        [Border] = 98                             ' border
        [Cadena] = 99                             ' cadena
        [Caracter] = 100                          ' caracter
        [Char] = 101                              ' CHAR
        [Condicion] = 102                         ' condicion
        [Div] = 103                               ' div
        [Doble] = 104                             ' doble
        [Double] = 105                            ' DOUBLE
        [Entero] = 106                            ' entero
        [False] = 107                             ' false
        [Height] = 108                            ' height
        [Id] = 109                                ' ID
        [Int] = 110                               ' INT
        [Nombreobj] = 111                         ' nombreObj
        [Ruta] = 112                              ' ruta
        [Seleccionar] = 113                       ' seleccionar
        [String] = 114                            ' STRING
        [True] = 115                              ' true
        [Valor] = 116                             ' valor
        [Variable] = 117                          ' variable
        [Version] = 118                           ' version
        [Width] = 119                             ' width
        [Aplantilla] = 120                        ' <aplantilla>
        [Arit1] = 121                             ' <arit1>
        [Arit2] = 122                             ' <arit2>
        [Arit3] = 123                             ' <arit3>
        [Array] = 124                             ' <array>
        [Asignacion] = 125                        ' <asignacion>
        [Atributo] = 126                          ' <atributo>
        [Atributos] = 127                         ' <atributos>
        [Bfor] = 128                              ' <bfor>
        [Caso] = 129                              ' <caso>
        [Casos] = 130                             ' <casos>
        [Column] = 131                            ' <column>
        [Columns] = 132                           ' <columns>
        [Cuerpo] = 133                            ' <cuerpo>
        [Declaracion] = 134                       ' <declaracion>
        [Defecto] = 135                           ' <defecto>
        [Etqhtml] = 136                           ' <etqhtml>
        [Expresion] = 137                         ' <expresion>
        [Fif] = 138                               ' <fif>
        [Fila] = 139                              ' <fila>
        [Filas] = 140                             ' <filas>
        [Fswitch] = 141                           ' <fswitch>
        [Getval] = 142                            ' <getval>
        [Jslt] = 143                              ' <jslt>
        [Json] = 144                              ' <json>
        [Lenguaje] = 145                          ' <lenguaje>
        [Ljson] = 146                             ' <ljson>
        [Log1] = 147                              ' <log1>
        [Log2] = 148                              ' <log2>
        [Log3] = 149                              ' <log3>
        [Lstring] = 150                           ' <lstring>
        [Numero] = 151                            ' <numero>
        [Obj] = 152                               ' <obj>
        [Plantilla] = 153                         ' <plantilla>
        [Proper] = 154                            ' <proper>
        [Propers] = 155                           ' <propers>
        [Rel] = 156                               ' <rel>
        [Ruta2] = 157                             ' <ruta>
        [Sentencia] = 158                         ' <sentencia>
        [Sentencias] = 159                        ' <sentencias>
        [Tipo] = 160                              ' <tipo>
        [Titulo] = 161                            ' <titulo>
        [Unitario] = 162                          ' <unitario>
        [Val] = 163                               ' <val>
        [Valasig] = 164                           ' <valAsig>
        [Valjson] = 165                           ' <valjson>
        [Var] = 166                               ' <var>
    End Enum

    Private Enum ProductionIndex
        [Lenguaje] = 0                            ' <lenguaje> ::= <json>
        [Lenguaje2] = 1                           ' <lenguaje> ::= <jslt>
        [Json_Lbrace_Rbrace] = 2                  ' <json> ::= '{' <atributos> '}'
        [Atributos_Comma] = 3                     ' <atributos> ::= <atributos> ',' <atributo>
        [Atributos] = 4                           ' <atributos> ::= <atributo>
        [Atributo_String_Colon] = 5               ' <atributo> ::= STRING ':' <valjson>
        [Valjson] = 6                             ' <valjson> ::= <json>
        [Valjson_String] = 7                      ' <valjson> ::= STRING
        [Valjson_Lbracket_Rbracket] = 8           ' <valjson> ::= '[' <array> ']'
        [Array] = 9                               ' <array> ::= <ljson>
        [Array2] = 10                             ' <array> ::= <lstring>
        [Ljson_Comma] = 11                        ' <ljson> ::= <ljson> ',' <json>
        [Ljson] = 12                              ' <ljson> ::= <json>
        [Lstring_Comma_String] = 13               ' <lstring> ::= <lstring> ',' STRING
        [Lstring_String] = 14                     ' <lstring> ::= STRING
        [Jslt_Ltjslcolontransformacion_Ruta_Eq_String_Version_Eq_String_Gt_Ltdivjslcolonfinalgt] = 15 ' <jslt> ::= '<jsl:transformacion' ruta '=' STRING version '=' STRING '>' <cuerpo> '</jsl:final>'
        [Cuerpo] = 16                             ' <cuerpo> ::= <declaracion> <cuerpo>
        [Cuerpo2] = 17                            ' <cuerpo> ::= <plantilla> <cuerpo>
        [Cuerpo3] = 18                            ' <cuerpo> ::= 
        [Sentencias] = 19                         ' <sentencias> ::= <sentencia> <sentencias>
        [Sentencias2] = 20                        ' <sentencias> ::= 
        [Sentencia] = 21                          ' <sentencia> ::= <declaracion>
        [Sentencia2] = 22                         ' <sentencia> ::= <asignacion>
        [Sentencia3] = 23                         ' <sentencia> ::= <aplantilla>
        [Sentencia4] = 24                         ' <sentencia> ::= <getval>
        [Sentencia5] = 25                         ' <sentencia> ::= <bfor>
        [Sentencia6] = 26                         ' <sentencia> ::= <fif>
        [Sentencia7] = 27                         ' <sentencia> ::= <fswitch>
        [Sentencia8] = 28                         ' <sentencia> ::= <etqhtml>
        [Declaracion_Ltjslcolonvariable_Eq_Id_Divgt] = 29 ' <declaracion> ::= '<jsl:variable' <tipo> '=' ID '/>'
        [Tipo_Entero] = 30                        ' <tipo> ::= entero
        [Tipo_Cadena] = 31                        ' <tipo> ::= cadena
        [Tipo_Boolean] = 32                       ' <tipo> ::= boolean
        [Tipo_Doble] = 33                         ' <tipo> ::= doble
        [Tipo_Caracter] = 34                      ' <tipo> ::= caracter
        [Asignacion_Ltjslcolonasignar_Variable_Eq_Id_Valor_Divgt] = 35 ' <asignacion> ::= '<jsl:asignar' variable '=' ID valor <valAsig> '/>'
        [Valasig_Eq] = 36                         ' <valAsig> ::= '=' <expresion>
        [Valasig_Pluseq] = 37                     ' <valAsig> ::= '+=' <expresion>
        [Valasig_Plusplus] = 38                   ' <valAsig> ::= '++'
        [Valasig_Minusminus] = 39                 ' <valAsig> ::= '--'
        [Plantilla_Ltjslcolonplantilla_Nombreobj_Eq_Gt_Ltdivjslcolonplantillagt] = 40 ' <plantilla> ::= '<jsl:plantilla' nombreObj '=' <obj> '>' <sentencias> '</jsl:plantilla>'
        [Aplantilla_Ltjslcolonplantillaminusaplicar_Seleccionar_Eq_Divgt] = 41 ' <aplantilla> ::= '<jsl:plantilla-aplicar' seleccionar '=' <obj> '/>'
        [Getval_Ltjslcolonvalorminusde_Seleccionar_Eq_Divgt] = 42 ' <getval> ::= '<jsl:valor-de' seleccionar '=' <obj> '/>'
        [Bfor_Ltjslcolonparaminuscada_Seleccionar_Eq_Gt_Ltdivjslcolonparaminuscadagt] = 43 ' <bfor> ::= '<jsl:para-cada' seleccionar '=' <obj> '>' <sentencias> '</jsl:para-cada>'
        [Fif_Ltjslcolonif_Condicion_Eq_Gt_Ltdivjslcolonifgt] = 44 ' <fif> ::= '<jsl:if' condicion '=' <expresion> '>' <sentencias> '</jsl:if>'
        [Fswitch_Ltjslcolonenminuscasogt_Ltdivjslcolonenminuscasogt] = 45 ' <fswitch> ::= '<jsl:en-caso>' <casos> '</jsl:en-caso>'
        [Casos] = 46                              ' <casos> ::= <caso> <casos>
        [Casos2] = 47                             ' <casos> ::= <defecto>
        [Casos3] = 48                             ' <casos> ::= <caso>
        [Caso_Ltjslcolonde_Condicion_Eq_Gt_Ltdivjslcolondegt] = 49 ' <caso> ::= '<jsl:de' condicion '=' <expresion> '>' <sentencias> '</jsl:de>'
        [Defecto_Ltjslcoloncualquierminusotrogt_Ltdivjslcoloncualquierminusotrogt] = 50 ' <defecto> ::= '<jsl:cualquier-otro>' <sentencias> '</jsl:cualquier-otro>'
        [Obj] = 51                                ' <obj> ::= <var> <ruta>
        [Obj_Atat] = 52                           ' <obj> ::= '@@' <var> <ruta>
        [Obj_At] = 53                             ' <obj> ::= '@' <var> <ruta>
        [Obj_At2] = 54                            ' <obj> ::= '@'
        [Obj_Dotdot] = 55                         ' <obj> ::= '..'
        [Obj_Dot] = 56                            ' <obj> ::= '.'
        [Ruta_At] = 57                            ' <ruta> ::= '@' <var> <ruta>
        [Ruta_Atat] = 58                          ' <ruta> ::= '@@' <var> <ruta>
        [Ruta] = 59                               ' <ruta> ::= 
        [Var_Id_Lbracket_Rbracket] = 60           ' <var> ::= ID '[' <expresion> ']'
        [Var_Id] = 61                             ' <var> ::= ID
        [Expresion] = 62                          ' <expresion> ::= <log1>
        [Log1_Pipepipe] = 63                      ' <log1> ::= <log1> '||' <log2>
        [Log1_Exclampipepipe] = 64                ' <log1> ::= <log1> '!||' <log2>
        [Log1_Amppipe] = 65                       ' <log1> ::= <log1> '&|' <log2>
        [Log1] = 66                               ' <log1> ::= <log2>
        [Log2_Ampamp] = 67                        ' <log2> ::= <log2> '&&' <log3>
        [Log2_Exclamampamp] = 68                  ' <log2> ::= <log2> '!&&' <log3>
        [Log2] = 69                               ' <log2> ::= <log3>
        [Log3_Exclam] = 70                        ' <log3> ::= '!' <rel>
        [Log3] = 71                               ' <log3> ::= <rel>
        [Rel_Eqeq] = 72                           ' <rel> ::= <rel> '==' <arit1>
        [Rel_Exclameq] = 73                       ' <rel> ::= <rel> '!=' <arit1>
        [Rel_Amplt] = 74                          ' <rel> ::= <rel> '&lt' <arit1>
        [Rel_Amplte] = 75                         ' <rel> ::= <rel> '&lte' <arit1>
        [Rel_Ampgt] = 76                          ' <rel> ::= <rel> '&gt' <arit1>
        [Rel_Ampgte] = 77                         ' <rel> ::= <rel> '&gte' <arit1>
        [Rel] = 78                                ' <rel> ::= <arit1>
        [Arit1_Plus] = 79                         ' <arit1> ::= <arit1> '+' <arit2>
        [Arit1_Minus] = 80                        ' <arit1> ::= <arit1> '-' <arit2>
        [Arit1] = 81                              ' <arit1> ::= <arit2>
        [Arit2_Times] = 82                        ' <arit2> ::= <arit2> '*' <arit3>
        [Arit2_Div] = 83                          ' <arit2> ::= <arit2> div <arit3>
        [Arit2_Percent] = 84                      ' <arit2> ::= <arit2> '%' <arit3>
        [Arit2] = 85                              ' <arit2> ::= <arit3>
        [Arit3_Caret] = 86                        ' <arit3> ::= <arit3> '^' <unitario>
        [Arit3] = 87                              ' <arit3> ::= <unitario>
        [Unitario] = 88                           ' <unitario> ::= <getval>
        [Unitario_Exclamnulo_Id] = 89             ' <unitario> ::= '!¡' ID
        [Unitario_Plusplus_Id] = 90               ' <unitario> ::= '++' ID
        [Unitario_Minusminus_Id] = 91             ' <unitario> ::= '--' ID
        [Unitario_Id_Plusplus] = 92               ' <unitario> ::= ID '++'
        [Unitario_Id_Minusminus] = 93             ' <unitario> ::= ID '--'
        [Unitario2] = 94                          ' <unitario> ::= <val>
        [Val_Lparen_Rparen] = 95                  ' <val> ::= '(' <log1> ')'
        [Val] = 96                                ' <val> ::= <obj>
        [Val_Char] = 97                           ' <val> ::= CHAR
        [Val_String] = 98                         ' <val> ::= STRING
        [Val_Minus] = 99                          ' <val> ::= '-' <numero>
        [Val2] = 100                              ' <val> ::= <numero>
        [Val_True] = 101                          ' <val> ::= true
        [Val_False] = 102                         ' <val> ::= false
        [Numero_Int] = 103                        ' <numero> ::= INT
        [Numero_Double] = 104                     ' <numero> ::= DOUBLE
        [Etqhtml_Lthtmlgt_Ltdivhtmlgt] = 105      ' <etqhtml> ::= '<html>' <sentencias> '</html>'
        [Etqhtml_Ltbodygt_Ltdivbodygt] = 106      ' <etqhtml> ::= '<body>' <sentencias> '</body>'
        [Etqhtml_Ltheadgt_Ltdivheadgt] = 107      ' <etqhtml> ::= '<head>' <titulo> '</head>'
        [Etqhtml_Lth1gt_Ltdivh1gt] = 108          ' <etqhtml> ::= '<h1>' <sentencias> '</h1>'
        [Etqhtml_Lth2gt_Ltdivh2gt] = 109          ' <etqhtml> ::= '<h2>' <sentencias> '</h2>'
        [Etqhtml_Lth3gt_Ltdivh3gt] = 110          ' <etqhtml> ::= '<h3>' <sentencias> '</h3>'
        [Etqhtml_Lth4gt_Ltdivh4gt] = 111          ' <etqhtml> ::= '<h4>' <sentencias> '</h4>'
        [Etqhtml_Lth5gt_Ltdivh5gt] = 112          ' <etqhtml> ::= '<h5>' <sentencias> '</h5>'
        [Etqhtml_Lth6gt_Ltdivh6gt] = 113          ' <etqhtml> ::= '<h6>' <sentencias> '</h6>'
        [Etqhtml_Lttable_Ltdivtablegt] = 114      ' <etqhtml> ::= '<table' <propers> <filas> '</table>'
        [Etqhtml_Ltpgt_Ltdivpgt] = 115            ' <etqhtml> ::= '<p>' <sentencias> '</p>'
        [Etqhtml_Ltbgt_Ltdivbgt] = 116            ' <etqhtml> ::= '<b>' <sentencias> '</b>'
        [Etqhtml_Ltigt_Ltdivigt] = 117            ' <etqhtml> ::= '<i>' <sentencias> '</i>'
        [Titulo_Lttitlegt_Ltdivtitlegt] = 118     ' <titulo> ::= '<title>' <sentencias> '</title>'
        [Titulo] = 119                            ' <titulo> ::= <sentencias>
        [Filas] = 120                             ' <filas> ::= <fila> <filas>
        [Filas2] = 121                            ' <filas> ::= 
        [Fila_Lttr_Ltdivtrgt] = 122               ' <fila> ::= '<tr' <propers> <columns> '</tr>'
        [Columns] = 123                           ' <columns> ::= <column> <columns>
        [Columns2] = 124                          ' <columns> ::= 
        [Column_Ltth_Ltdivthgt] = 125             ' <column> ::= '<th' <propers> <sentencias> '</th>'
        [Column_Lttd_Ltdivtdgt] = 126             ' <column> ::= '<td' <propers> <sentencias> '</td>'
        [Propers] = 127                           ' <propers> ::= <proper> <propers>
        [Propers_Gt] = 128                        ' <propers> ::= '>'
        [Proper_Border_Eq_String] = 129           ' <proper> ::= border '=' STRING
        [Proper_Bgcolor_Eq_String] = 130          ' <proper> ::= bgcolor '=' STRING
        [Proper_Width_Eq_String] = 131            ' <proper> ::= width '=' STRING
        [Proper_Height_Eq_String] = 132           ' <proper> ::= height '=' STRING
    End Enum



    Public Program As Object     'You might derive a specific object

    Public Sub Setup()
        'This procedure can be called to load the parse tables. The class can
        'read tables using a BinaryReader.
        Parser.LoadTables(Path.Combine(Application.StartupPath, "GramaticaJslt.egt"))
    End Sub

    Public Function Parse(ByVal Reader As TextReader) As Boolean
        'This procedure starts the GOLD Parser Engine and handles each of the
        'messages it returns. Each time a reduction is made, you can create new
        'custom object and reassign the .CurrentReduction property. Otherwise, 
        'the system will use the Reduction object that was returned.
        '
        'The resulting tree will be a pure representation of the language 
        'and will be ready to implement.

        Dim Response As GOLD.ParseMessage
        Dim Done As Boolean                  'Controls when we leave the loop
        Dim Accepted As Boolean = False      'Was the parse successful?

        Accepted = False    'Unless the program is accepted by the parser

        Parser.Open(Reader)
        Parser.TrimReductions = False  'Please read about this feature before enabling  

        Done = False
        Do Until Done
            Response = Parser.Parse()

            Select Case Response
                Case GOLD.ParseMessage.LexicalError
                    'Cannot recognize token
                    MsgBox("Error Lexico: " & Parser.CurrentToken.Data & " Fila: " & Parser.CurrentPosition.Line & ", Columna: " & Parser.CurrentPosition.Column)
                    Done = True

                Case GOLD.ParseMessage.SyntaxError
                    'Expecting a different token
                    MsgBox("Error Sintactico: " & Parser.CurrentToken.Data & " Fila: " & Parser.CurrentPosition.Line & ", Columna: " & Parser.CurrentPosition.Column)
                    Done = True

                Case GOLD.ParseMessage.Reduction
                    'Create a customized object to store the reduction
                    Parser.CurrentReduction = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.Accept
                    'Accepted!
                    'Program = Parser.CurrentReduction  'The root node!                 
                    MsgBox("Análisis exitoso")
                    Dim transform As Transform = New Transform
                    transform.resolverTransform(raizJsl)
                    Done = True
                    Accepted = True

                Case GOLD.ParseMessage.TokenRead
                    'You don't have to do anything here.

                Case GOLD.ParseMessage.InternalError
                    'INTERNAL ERROR! Something is horribly wrong.
                    Done = True

                Case GOLD.ParseMessage.NotLoadedError
                    'This error occurs if the CGT was not loaded.                   
                    Done = True

                Case GOLD.ParseMessage.GroupError
                    'COMMENT ERROR! Unexpected end of file
                    Done = True
            End Select
        Loop

        Return Accepted
    End Function

    Private Function CreateNewObject(Reduction As GOLD.Reduction) As Object
        Dim Result As Object = Nothing
        Dim nodo As Nodo = New Nodo
        Dim ptr As PtrJson = New PtrJson
        Dim lista As ArrayList = New ArrayList

        With Reduction
            Select Case .Parent.TableIndex
                Case ProductionIndex.Lenguaje
                    ' <lenguaje> ::= <json> 

                Case ProductionIndex.Lenguaje2
                    ' <lenguaje> ::= <jslt> 

                Case ProductionIndex.Json_Lbrace_Rbrace
                    ' <json> ::= '{' <atributos> '}' 
                    ptr = New PtrJson
                    ptr = ptr.crearArr(Constantes.R_JSLLA, "{}", .Item(0).Position.Line, .Item(0).Position.Column, CType(.Item(1).Data, ArrayList))
                    raizJson = New PtrJson
                    raizJson = ptr
                    Return ptr

                Case ProductionIndex.Atributos_Comma
                    ' <atributos> ::= <atributos> ',' <atributo> 
                    ptr = New PtrJson
                    Return ptr.addList(CType(.Item(0).Data, ArrayList), CType(.Item(2).Data, PtrJson))

                Case ProductionIndex.Atributos
                    ' <atributos> ::= <atributo> 
                    ptr = New PtrJson
                    Return ptr.generarList(CType(.Item(0).Data, PtrJson))

                Case ProductionIndex.Atributo_String_Colon
                    ' <atributo> ::= STRING ':' <valjson> 
                    ptr = New PtrJson
                    Return ptr.crearAtributo(.Item(0).Data.ToString.Replace("""", ""), .Item(0).Position.Line, .Item(0).Position.Column, CType(.Item(2).Data, PtrJson))

                Case ProductionIndex.Valjson
                    ' <valjson> ::= <json> 
                    ptr = New PtrJson
                    ptr = CType(.Item(0).Data, PtrJson)
                    Return ptr

                Case ProductionIndex.Valjson_String
                    ' <valjson> ::= STRING 
                    ptr = New PtrJson
                    Return ptr.crearHoja(.Item(0).Data.ToString.Replace("""", ""), .Item(0).Position.Line, .Item(0).Position.Column)
                    
                Case ProductionIndex.Valjson_Lbracket_Rbracket
                    ' <valjson> ::= '[' <array> ']' 
                    ptr = New PtrJson
                    ptr = ptr.crearArr(Constantes.R_JSCOR, "[]", .Item(0).Position.Line, .Item(0).Position.Column, CType(.Item(1).Data, ArrayList))
                    Return ptr

                Case ProductionIndex.Array
                    ' <array> ::= <ljson> 
                    lista = New ArrayList
                    lista = CType(.Item(0).Data, ArrayList)
                    Return lista

                Case ProductionIndex.Array2
                    ' <array> ::= <lstring> 
                    lista = New ArrayList
                    lista = CType(.Item(0).Data, ArrayList)
                    Return lista

                Case ProductionIndex.Ljson_Comma
                    ' <ljson> ::= <ljson> ',' <json> 
                    ptr = New PtrJson
                    Return ptr.addList(CType(.Item(0).Data, ArrayList), CType(.Item(2).Data, PtrJson))

                Case ProductionIndex.Ljson
                    ' <ljson> ::= <json> 
                    ptr = New PtrJson
                    Return ptr.generarList(CType(.Item(0).Data, PtrJson))

                Case ProductionIndex.Lstring_Comma_String
                    ' <lstring> ::= <lstring> ',' STRING 
                    ptr = New PtrJson
                    ptr = ptr.crearHoja(.Item(2).Data.ToString.Replace("""", ""), .Item(2).Position.Line, .Item(2).Position.Column)
                    Return ptr.addList(CType(.Item(0).Data, ArrayList), ptr)

                Case ProductionIndex.Lstring_String
                    ' <lstring> ::= STRING
                    ptr = New PtrJson
                    ptr = ptr.crearHoja(.Item(0).Data.ToString.Replace("""", ""), .Item(0).Position.Line, .Item(0).Position.Column)
                    Return ptr.generarList(ptr)


                Case ProductionIndex.Jslt_Ltjslcolontransformacion_Ruta_Eq_String_Version_Eq_String_Gt_Ltdivjslcolonfinalgt
                    ' <jslt> ::= '<jsl:transformacion' ruta '=' STRING version '=' STRING '>' <cuerpo> '</jsl:final>' 
                    direccion = .Item(3).Data.ToString.Replace("""", "")
                    raizJsl = New Nodo
                    raizJsl = raizJsl.crearJSL(Constantes.SR_TRANSFORM, .Item(6).Data.ToString.Replace("""", ""), .Item(6).Position.Line, .Item(6).Position.Column, CType(.Item(8).Data, ArrayList))

                Case ProductionIndex.Cuerpo
                    ' <cuerpo> ::= <declaracion> <cuerpo> 
                    lista = New ArrayList
                    lista = CType(.Item(1).Data, ArrayList)
                    lista.Insert(0, CType(.Item(0).Data, Nodo))
                    Return lista

                Case ProductionIndex.Cuerpo2
                    ' <cuerpo> ::= <plantilla> <cuerpo> 
                    lista = New ArrayList
                    lista = CType(.Item(1).Data, ArrayList)
                    lista.Insert(0, CType(.Item(0).Data, Nodo))
                    Return lista

                Case ProductionIndex.Cuerpo3
                    ' <cuerpo> ::=  
                    lista = New ArrayList
                    Return lista

                Case ProductionIndex.Sentencias
                    ' <sentencias> ::= <sentencia> <sentencias> 
                    lista = New ArrayList
                    lista = CType(.Item(1).Data, ArrayList)
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    lista.Insert(0, nodo)
                    Return lista

                Case ProductionIndex.Sentencias2
                    ' <sentencias> ::=  
                    lista = New ArrayList
                    Return lista

                Case ProductionIndex.Sentencia
                    ' <sentencia> ::= <declaracion> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia2
                    ' <sentencia> ::= <asignacion> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia3
                    ' <sentencia> ::= <aplantilla> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia4
                    ' <sentencia> ::= <getval> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia5
                    ' <sentencia> ::= <bfor> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia6
                    ' <sentencia> ::= <fif> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia7
                    ' <sentencia> ::= <fswitch> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia8
                    ' <sentencia> ::= <etqhtml> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Declaracion_Ltjslcolonvariable_Eq_Id_Divgt
                    ' <declaracion> ::= '<jsl:variable' <tipo> '=' ID '/>' 
                    nodo = New Nodo
                    Return nodo.crearDeclare(CType(.Item(1).Data, Integer), .Item(3).Data.ToString, .Item(3).Position.Line, .Item(3).Position.Column)

                Case ProductionIndex.Tipo_Entero
                    ' <tipo> ::= entero 
                    Return Constantes.T_ENTERO

                Case ProductionIndex.Tipo_Cadena
                    ' <tipo> ::= cadena 
                    Return Constantes.T_CADENA

                Case ProductionIndex.Tipo_Boolean
                    ' <tipo> ::= boolean 
                    Return Constantes.T_BOOLEAN

                Case ProductionIndex.Tipo_Doble
                    ' <tipo> ::= doble 
                    Return Constantes.T_DOBLE

                Case ProductionIndex.Tipo_Caracter
                    ' <tipo> ::= caracter 
                    Return Constantes.T_CARACTER

                Case ProductionIndex.Asignacion_Ltjslcolonasignar_Variable_Eq_Id_Valor_Divgt
                    ' <asignacion> ::= '<jsl:asignar' variable '=' ID valor <valAsig> '/>' 
                    nodo = New Nodo
                    nodo = CType(.Item(5).Data, Nodo)
                    nodo.fila = .Item(3).Position.Line
                    nodo.column = .Item(3).Position.Column
                    nodo.cad = .Item(3).Data.ToString
                    Return nodo

                Case ProductionIndex.Valasig_Eq
                    ' <valAsig> ::= '=' <expresion> 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_ASIG, CType(.Item(1).Data, Nodo))

                Case ProductionIndex.Valasig_Pluseq
                    ' <valAsig> ::= '+=' <expresion> 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_CONCAT, CType(.Item(1).Data, Nodo))

                Case ProductionIndex.Valasig_Plusplus
                    ' <valAsig> ::= '++' 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_POS_INC)

                Case ProductionIndex.Valasig_Minusminus
                    ' <valAsig> ::= '--' 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_POS_DEC)

                Case ProductionIndex.Plantilla_Ltjslcolonplantilla_Nombreobj_Eq_Gt_Ltdivjslcolonplantillagt
                    ' <plantilla> ::= '<jsl:plantilla' nombreObj '=' <obj> '>' <sentencias> '</jsl:plantilla>' 
                    nodo = New Nodo
                    nodo = nodo.crearJSL(Constantes.SR_PLANTILLA, "Plantilla", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(5).Data, ArrayList))
                    nodo.pred(nodo, CType(.Item(3).Data, Nodo))
                    Return nodo

                Case ProductionIndex.Aplantilla_Ltjslcolonplantillaminusaplicar_Seleccionar_Eq_Divgt
                    ' <aplantilla> ::= '<jsl:plantilla-aplicar' seleccionar '=' <obj> '/>' 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_APLANTILLA, "Plantilla-aplicar", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(3).Data, Nodo))

                Case ProductionIndex.Getval_Ltjslcolonvalorminusde_Seleccionar_Eq_Divgt
                    ' <getval> ::= '<jsl:valor-de' seleccionar '=' <obj> '/>' 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_GETVAL, "Valor-de", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(3).Data, Nodo))

                Case ProductionIndex.Bfor_Ltjslcolonparaminuscada_Seleccionar_Eq_Gt_Ltdivjslcolonparaminuscadagt
                    ' <bfor> ::= '<jsl:para-cada' seleccionar '=' <obj> '>' <sentencias> '</jsl:para-cada>' 
                    nodo = New Nodo
                    nodo = nodo.crearJSL(Constantes.SR_FOR, "Para-cada", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(5).Data, ArrayList))
                    nodo.pred(nodo, CType(.Item(3).Data, Nodo))
                    Return nodo

                Case ProductionIndex.Fif_Ltjslcolonif_Condicion_Eq_Gt_Ltdivjslcolonifgt
                    ' <fif> ::= '<jsl:if' condicion '=' <expresion> '>' <sentencias> '</jsl:if>' 
                    nodo = New Nodo
                    nodo = nodo.crearJSL(Constantes.SR_IF, "If", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(5).Data, ArrayList))
                    nodo.pred(nodo, CType(.Item(3).Data, Nodo))
                    Return nodo

                Case ProductionIndex.Fswitch_Ltjslcolonenminuscasogt_Ltdivjslcolonenminuscasogt
                    ' <fswitch> ::= '<jsl:en-caso>' <casos> '</jsl:en-caso>' 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_SWITCH, "En-caso", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Casos
                    ' <casos> ::= <caso> <casos> 
                    lista = New ArrayList
                    lista = CType(.Item(1).Data, ArrayList)
                    lista.Insert(0, CType(.Item(0).Data, Nodo))
                    Return lista

                Case ProductionIndex.Casos2
                    ' <casos> ::= <defecto> 
                    lista = New ArrayList
                    lista.Add(CType(.Item(0).Data, Nodo))
                    Return lista

                Case ProductionIndex.Casos3
                    ' <casos> ::= <caso> 
                    lista = New ArrayList
                    lista.Add(CType(.Item(0).Data, Nodo))
                    Return lista
                    
                Case ProductionIndex.Caso_Ltjslcolonde_Condicion_Eq_Gt_Ltdivjslcolondegt
                    ' <caso> ::= '<jsl:de' condicion '=' <expresion> '>' <sentencias> '</jsl:de>' 
                    nodo = New Nodo
                    nodo = nodo.crearJSL(Constantes.SR_CASO, "De", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(5).Data, ArrayList))
                    nodo.pred(nodo, CType(.Item(3).Data, Nodo))
                    Return nodo

                Case ProductionIndex.Defecto_Ltjslcoloncualquierminusotrogt_Ltdivjslcoloncualquierminusotrogt
                    ' <defecto> ::= '<jsl:cualquier-otro>' <sentencias> '</jsl:cualquier-otro>' 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_DEFAULT, "Cualquier-otro", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Obj
                    ' <obj> ::= <var> <ruta> 
                    nodo = New Nodo
                    Return nodo.pred(CType(.Item(1).Data, Nodo), CType(.Item(0).Data, Nodo))

                Case ProductionIndex.Obj_Atat
                    ' <obj> ::= '@@' <var> <ruta> 
                    nodo = New Nodo
                    Return nodo.predAcceso(CType(.Item(2).Data, Nodo), CType(.Item(1).Data, Nodo), Constantes.SR_POR_A)

                Case ProductionIndex.Obj_At
                    ' <obj> ::= '@' <var> <ruta> 
                    nodo = New Nodo
                    Return nodo.predAcceso(CType(.Item(2).Data, Nodo), CType(.Item(1).Data, Nodo), Constantes.SR_POR_A)

                Case ProductionIndex.Obj_At2
                    ' <obj> ::= '@' 
                    nodo = New Nodo
                    Return nodo.crearAcceso(Constantes.SR_RAIZ, "@", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Obj_Dotdot
                    ' <obj> ::= '..' 
                    nodo = New Nodo
                    Return nodo.crearAcceso(Constantes.SR_PADRE, "..", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Obj_Dot
                    ' <obj> ::= '.' 
                    nodo = New Nodo
                    Return nodo.crearAcceso(Constantes.SR_ACTUAL, ".", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Ruta_At
                    ' <ruta> ::= '@' <var> <ruta> 
                    nodo = New Nodo
                    Return nodo.predAcceso(CType(.Item(2).Data, Nodo), CType(.Item(1).Data, Nodo), Constantes.SR_POR_A)

                Case ProductionIndex.Ruta_Atat
                    ' <ruta> ::= '@@' <var> <ruta> 
                    nodo = New Nodo
                    Return nodo.predAcceso(CType(.Item(2).Data, Nodo), CType(.Item(1).Data, Nodo), Constantes.SR_POR_AA)

                Case ProductionIndex.Ruta
                    ' <ruta> ::=  
                    nodo = New Nodo
                    Return nodo.crearAcceso()

                Case ProductionIndex.Var_Id_Lbracket_Rbracket
                    ' <var> ::= ID '[' <expresion> ']' 
                    nodo = New Nodo
                    Return nodo.crearArr(Constantes.SR_DIRECTO, .Item(0).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Var_Id
                    ' <var> ::= ID 
                    nodo = New Nodo
                    Return nodo.crearVar(Constantes.SR_DIRECTO, .Item(0).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Expresion
                    ' <expresion> ::= <log1> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Log1_Pipepipe
                    ' <log1> ::= <log1> '||' <log2> 
                    nodo = New Nodo
                    Return nodo.crearLogica(Constantes.SR_OR, "||", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Log1_Exclampipepipe
                    ' <log1> ::= <log1> '!||' <log2> 
                    nodo = New Nodo
                    Return nodo.crearLogica(Constantes.SR_NOR, "!||", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Log1_Amppipe
                    ' <log1> ::= <log1> '&|' <log2> 
                    nodo = New Nodo
                    Return nodo.crearLogica(Constantes.SR_XOR, "&|", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Log1
                    ' <log1> ::= <log2> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Log2_Ampamp
                    ' <log2> ::= <log2> '&&' <log3> 
                    nodo = New Nodo
                    Return nodo.crearLogica(Constantes.SR_AND, "&&", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Log2_Exclamampamp
                    ' <log2> ::= <log2> '!&&' <log3> 
                    nodo = New Nodo
                    Return nodo.crearLogica(Constantes.SR_NAND, "!&&", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Log2
                    ' <log2> ::= <log3> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Log3_Exclam
                    ' <log3> ::= '!' <rel> 
                    nodo = New Nodo
                    Return nodo.crearLogica(Constantes.SR_NOT, "!", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, Nodo))

                Case ProductionIndex.Log3
                    ' <log3> ::= <rel> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Rel_Eqeq
                    ' <rel> ::= <rel> '==' <arit1> 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_IGUAL, "==", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Rel_Exclameq
                    ' <rel> ::= <rel> '!=' <arit1> 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_DIFERENTE, "!=", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Rel_Amplt
                    ' <rel> ::= <rel> '&lt' <arit1> 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_MENOR, "&lt", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Rel_Amplte
                    ' <rel> ::= <rel> '&lte' <arit1> 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_MENOR_IGUAL, "&lte", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Rel_Ampgt
                    ' <rel> ::= <rel> '&gt' <arit1> 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_MAYOR, "&gt", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Rel_Ampgte
                    ' <rel> ::= <rel> '&gte' <arit1> 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_MAYOR_IGUAL, "&gte", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Rel
                    ' <rel> ::= <arit1> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Arit1_Plus
                    ' <arit1> ::= <arit1> '+' <arit2> 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_SUM, "+", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Arit1_Minus
                    ' <arit1> ::= <arit1> '-' <arit2> 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_SUB, "-", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Arit1
                    ' <arit1> ::= <arit2> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Arit2_Times
                    ' <arit2> ::= <arit2> '*' <arit3> 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_MUL, "*", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Arit2_Div
                    ' <arit2> ::= <arit2> div <arit3> 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_DIV, "/", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Arit2_Percent
                    ' <arit2> ::= <arit2> '%' <arit3> 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_MOD, "%", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Arit2
                    ' <arit2> ::= <arit3> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Arit3_Caret
                    ' <arit3> ::= <arit3> '^' <unitario> 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_POW, "^", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Arit3
                    ' <arit3> ::= <unitario> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Unitario
                    ' <unitario> ::= <getval> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Unitario_Exclamnulo_Id
                    ' <unitario> ::= '!¡' ID 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_NULO, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Unitario_Plusplus_Id
                    ' <unitario> ::= '++' ID 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_PRE_INC, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Unitario_Minusminus_Id
                    ' <unitario> ::= '--' ID 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_PRE_DEC, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Unitario_Id_Plusplus
                    ' <unitario> ::= ID '++' 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_POS_INC, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Unitario_Id_Minusminus
                    ' <unitario> ::= ID '--' 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_POS_DEC, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Unitario2
                    ' <unitario> ::= <val> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Val_Lparen_Rparen
                    ' <val> ::= '(' <log1> ')' 
                    nodo = New Nodo
                    nodo = CType(.Item(1).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Val
                    ' <val> ::= <obj> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Val_Char
                    ' <val> ::= CHAR 
                    nodo = New Nodo
                    Return nodo.crearOperador(Constantes.SR_CARACTER, Constantes.T_CARACTER, .Item(0).Data.ToString.Replace("'", ""), Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Val_String
                    ' <val> ::= STRING 
                    nodo = New Nodo
                    Return nodo.crearOperador(Constantes.SR_CADENA, Constantes.T_CADENA, .Item(0).Data.ToString.Replace("""", ""), Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Val_Minus
                    ' <val> ::= '-' <numero> 
                    nodo = New Nodo
                    nodo = CType(.Item(1).Data, Nodo)
                    nodo.cad = "-" + nodo.cad
                    Return nodo

                Case ProductionIndex.Val2
                    ' <val> ::= <numero> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Val_True
                    ' <val> ::= true 
                    nodo = New Nodo
                    Return nodo.crearOperador(Constantes.SR_BOOLEAN, Constantes.T_BOOLEAN, "true", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Val_False
                    ' <val> ::= false 
                    nodo = New Nodo
                    Return nodo.crearOperador(Constantes.SR_BOOLEAN, Constantes.T_BOOLEAN, "false", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Numero_Int
                    ' <numero> ::= INT 
                    nodo = New Nodo
                    Return nodo.crearOperador(Constantes.SR_ENTERO, Constantes.T_ENTERO, .Item(0).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Numero_Double
                    ' <numero> ::= DOUBLE 
                    nodo = New Nodo
                    Return nodo.crearOperador(Constantes.SR_DOBLE, Constantes.T_DOBLE, .Item(0).Data.ToString.Replace(".", ","), Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Etqhtml_Lthtmlgt_Ltdivhtmlgt
                    ' <etqhtml> ::= '<html>' <sentencias> '</html>' 
                    nodo = New Nodo
                    nodo = nodo.crearHTML(Constantes.SR_HTML, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))
                    Return nodo

                Case ProductionIndex.Etqhtml_Ltbodygt_Ltdivbodygt
                    ' <etqhtml> ::= '<body>' <sentencias> '</body>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_BODY, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Ltheadgt_Ltdivheadgt
                    ' <etqhtml> ::= '<head>' <titulo> '</head>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_HEAD, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lth1gt_Ltdivh1gt
                    ' <etqhtml> ::= '<h1>' <sentencias> '</h1>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_H1, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lth2gt_Ltdivh2gt
                    ' <etqhtml> ::= '<h2>' <sentencias> '</h2>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_H2, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lth3gt_Ltdivh3gt
                    ' <etqhtml> ::= '<h3>' <sentencias> '</h3>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_H3, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lth4gt_Ltdivh4gt
                    ' <etqhtml> ::= '<h4>' <sentencias> '</h4>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_H4, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lth5gt_Ltdivh5gt
                    ' <etqhtml> ::= '<h5>' <sentencias> '</h5>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_H5, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lth6gt_Ltdivh6gt
                    ' <etqhtml> ::= '<h6>' <sentencias> '</h6>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_H6, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lttable_Ltdivtablegt
                    ' <etqhtml> ::= '<table' <propers> <filas> '</table>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_TABLE, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(2).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Ltpgt_Ltdivpgt
                    ' <etqhtml> ::= '<p>' <sentencias> '</p>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_P, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Ltbgt_Ltdivbgt
                    ' <etqhtml> ::= '<b>' <sentencias> '</b>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_B, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Ltigt_Ltdivigt
                    ' <etqhtml> ::= '<i>' <sentencias> '</i>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_I, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Titulo_Lttitlegt_Ltdivtitlegt
                    ' <titulo> ::= '<title>' <sentencias> '</title>' 
                    nodo = New Nodo
                    nodo = nodo.crearHTML(Constantes.SR_TITLE, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, Nodo))
                    lista = New ArrayList
                    lista.Add(nodo)
                    Return lista

                Case ProductionIndex.Titulo
                    ' <titulo> ::= <sentencias> 
                    lista = New ArrayList
                    lista = CType(.Item(0).Data, ArrayList)
                    Return lista

                Case ProductionIndex.Filas
                    ' <filas> ::= <fila> <filas> 
                    lista = New ArrayList
                    lista = CType(.Item(1).Data, ArrayList)
                    lista.Insert(0, CType(.Item(0).Data, Nodo))
                    Return lista

                Case ProductionIndex.Filas2
                    ' <filas> ::=  
                    lista = New ArrayList
                    Return lista

                Case ProductionIndex.Fila_Lttr_Ltdivtrgt
                    ' <fila> ::= '<tr' <propers> <columns> '</tr>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_TR, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(2).Data, ArrayList))

                Case ProductionIndex.Columns
                    ' <columns> ::= <column> <columns> 
                    lista = New ArrayList
                    lista = CType(.Item(1).Data, ArrayList)
                    lista.Insert(0, CType(.Item(0).Data, Nodo))
                    Return lista

                Case ProductionIndex.Columns2
                    ' <columns> ::=  
                    lista = New ArrayList
                    Return lista

                Case ProductionIndex.Column_Ltth_Ltdivthgt
                    ' <column> ::= '<th' <propers> <sentencias> '</th>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_TH, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(2).Data, ArrayList))

                Case ProductionIndex.Column_Lttd_Ltdivtdgt
                    ' <column> ::= '<td' <propers> <sentencias> '</td>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_TD, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(2).Data, ArrayList))

                Case ProductionIndex.Propers
                    ' <propers> ::= <proper> <propers> 
                    Return .Item(0).Data.ToString + " " + .Item(1).Data.ToString

                Case ProductionIndex.Propers_Gt
                    ' <propers> ::= '>' 
                    Return ">"

                Case ProductionIndex.Proper_Border_Eq_String
                    ' <proper> ::= border '=' STRING 
                    Return "border=" + .Item(2).Data.ToString

                Case ProductionIndex.Proper_Bgcolor_Eq_String
                    ' <proper> ::= bgcolor '=' STRING 
                    Return "bgcolor=" + .Item(2).Data.ToString

                Case ProductionIndex.Proper_Width_Eq_String
                    ' <proper> ::= width '=' STRING 
                    Return "width=" + .Item(2).Data.ToString

                Case ProductionIndex.Proper_Height_Eq_String
                    ' <proper> ::= height '=' STRING 
                    Return "height=" + .Item(2).Data.ToString

            End Select
        End With

        Return Result
    End Function
End Module
