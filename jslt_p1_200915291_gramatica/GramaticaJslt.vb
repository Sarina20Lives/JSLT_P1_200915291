'Generated by the GOLD Parser Builder

Option Explicit On
Option Strict Off

Imports System.IO
Imports System.Windows.Forms


Module MyParser
    Private Parser As New GOLD.Parser

    'false = json, true = jslt
    Public analisis As Boolean = False
    Public direccion As String = ""
    Public raizJsl As Nodo = New Nodo
    Public raizJson As PtrJson = New PtrJson

    Private Enum SymbolIndex
        [Eof] = 0                                 ' (EOF)
        [Error] = 1                               ' (Error)
        [Comment] = 2                             ' Comment
        [Newline] = 3                             ' NewLine
        [Whitespace] = 4                          ' Whitespace
        [Numnum] = 5                              ' '##'
        [Numtimes] = 6                            ' '#*'
        [Timesnum] = 7                            ' '*#'
        [Minus] = 8                               ' '-'
        [Minusminus] = 9                          ' '--'
        [Exclam] = 10                             ' '!'
        [Exclamampamp] = 11                       ' '!&&'
        [Exclampipepipe] = 12                     ' '!||'
        [Exclamnulo] = 13                         ' '!¡'
        [Exclameq] = 14                           ' '!='
        [Percent] = 15                            ' '%'
        [Ampamp] = 16                             ' '&&'
        [Amppipe] = 17                            ' '&|'
        [Ampgt] = 18                              ' '&gt'
        [Ampgte] = 19                             ' '&gte'
        [Amplt] = 20                              ' '&lt'
        [Amplte] = 21                             ' '&lte'
        [Lparen] = 22                             ' '('
        [Rparen] = 23                             ' ')'
        [Times] = 24                              ' '*'
        [Comma] = 25                              ' ','
        [Dot] = 26                                ' '.'
        [Dotdot] = 27                             ' '..'
        [Divgt] = 28                              ' '/>'
        [Colon] = 29                              ' ':'
        [At] = 30                                 ' '@'
        [Atat] = 31                               ' '@@'
        [Lbracket] = 32                           ' '['
        [Rbracket] = 33                           ' ']'
        [Caret] = 34                              ' '^'
        [Lbrace] = 35                             ' '{'
        [Pipepipe] = 36                           ' '||'
        [Rbrace] = 37                             ' '}'
        [Plus] = 38                               ' '+'
        [Plusplus] = 39                           ' '++'
        [Pluseq] = 40                             ' '+='
        [Ltdivbgt] = 41                           ' '</b>'
        [Ltdivbodygt] = 42                        ' '</body>'
        [Ltdivh1gt] = 43                          ' '</h1>'
        [Ltdivh2gt] = 44                          ' '</h2>'
        [Ltdivh3gt] = 45                          ' '</h3>'
        [Ltdivh4gt] = 46                          ' '</h4>'
        [Ltdivh5gt] = 47                          ' '</h5>'
        [Ltdivh6gt] = 48                          ' '</h6>'
        [Ltdivheadgt] = 49                        ' '</head>'
        [Ltdivhtmlgt] = 50                        ' '</html>'
        [Ltdivigt] = 51                           ' '</i>'
        [Ltdivjslcoloncualquierminusotrogt] = 52  ' '</jsl:cualquier-otro>'
        [Ltdivjslcolondegt] = 53                  ' '</jsl:de>'
        [Ltdivjslcolonenminuscasogt] = 54         ' '</jsl:en-caso>'
        [Ltdivjslcolonfinalgt] = 55               ' '</jsl:final>'
        [Ltdivjslcolonifgt] = 56                  ' '</jsl:if>'
        [Ltdivjslcolonparaminuscadagt] = 57       ' '</jsl:para-cada>'
        [Ltdivjslcolonplantillagt] = 58           ' '</jsl:plantilla>'
        [Ltdivpgt] = 59                           ' '</p>'
        [Ltdivtablegt] = 60                       ' '</table>'
        [Ltdivtdgt] = 61                          ' '</td>'
        [Ltdivthgt] = 62                          ' '</th>'
        [Ltdivtitlegt] = 63                       ' '</title>'
        [Ltdivtrgt] = 64                          ' '</tr>'
        [Ltbgt] = 65                              ' '<b>'
        [Ltbodygt] = 66                           ' '<body>'
        [Lth1gt] = 67                             ' '<h1>'
        [Lth2gt] = 68                             ' '<h2>'
        [Lth3gt] = 69                             ' '<h3>'
        [Lth4gt] = 70                             ' '<h4>'
        [Lth5gt] = 71                             ' '<h5>'
        [Lth6gt] = 72                             ' '<h6>'
        [Ltheadgt] = 73                           ' '<head>'
        [Lthtmlgt] = 74                           ' '<html>'
        [Ltigt] = 75                              ' '<i>'
        [Ltjslcolonasignar] = 76                  ' '<jsl:asignar'
        [Ltjslcoloncualquierminusotrogt] = 77     ' '<jsl:cualquier-otro>'
        [Ltjslcolonde] = 78                       ' '<jsl:de'
        [Ltjslcolonenminuscasogt] = 79            ' '<jsl:en-caso>'
        [Ltjslcolonif] = 80                       ' '<jsl:if'
        [Ltjslcolonparaminuscada] = 81            ' '<jsl:para-cada'
        [Ltjslcolonplantilla] = 82                ' '<jsl:plantilla'
        [Ltjslcolonplantillaminusaplicar] = 83    ' '<jsl:plantilla-aplicar'
        [Ltjslcolontransformacion] = 84           ' '<jsl:transformacion'
        [Ltjslcolonvalorminusde] = 85             ' '<jsl:valor-de'
        [Ltjslcolonvariable] = 86                 ' '<jsl:variable'
        [Ltpgt] = 87                              ' '<p>'
        [Lttable] = 88                            ' '<table'
        [Lttd] = 89                               ' '<td'
        [Ltth] = 90                               ' '<th'
        [Lttitlegt] = 91                          ' '<title>'
        [Lttr] = 92                               ' '<tr'
        [Eq] = 93                                 ' '='
        [Eqeq] = 94                               ' '=='
        [Gt] = 95                                 ' '>'
        [Bgcolor] = 96                            ' bgcolor
        [Boolean] = 97                            ' boolean
        [Border] = 98                             ' border
        [Cadena] = 99                             ' cadena
        [Caracter] = 100                          ' caracter
        [Char] = 101                              ' CHAR
        [Condicion] = 102                         ' condicion
        [Div] = 103                               ' div
        [Doble] = 104                             ' doble
        [Double] = 105                            ' DOUBLE
        [Entero] = 106                            ' entero
        [False] = 107                             ' false
        [Height] = 108                            ' height
        [Id] = 109                                ' ID
        [Int] = 110                               ' INT
        [Nombreobj] = 111                         ' nombreObj
        [Ruta] = 112                              ' ruta
        [Seleccionar] = 113                       ' seleccionar
        [String] = 114                            ' STRING
        [True] = 115                              ' true
        [Valor] = 116                             ' valor
        [Variable] = 117                          ' variable
        [Version] = 118                           ' version
        [Width] = 119                             ' width
        [Aplantilla] = 120                        ' <aplantilla>
        [Arit1] = 121                             ' <arit1>
        [Arit2] = 122                             ' <arit2>
        [Arit3] = 123                             ' <arit3>
        [Asignacion] = 124                        ' <asignacion>
        [Atbjs] = 125                             ' <atbJS>
        [Atbsjs] = 126                            ' <atbsJS>
        [Bfor] = 127                              ' <bfor>
        [Caso] = 128                              ' <caso>
        [Casos] = 129                             ' <casos>
        [Column] = 130                            ' <column>
        [Columns] = 131                           ' <columns>
        [Cuerpo] = 132                            ' <cuerpo>
        [Declaracion] = 133                       ' <declaracion>
        [Defecto] = 134                           ' <defecto>
        [Etqhtml] = 135                           ' <etqhtml>
        [Expresion] = 136                         ' <expresion>
        [Fif] = 137                               ' <fif>
        [Fila] = 138                              ' <fila>
        [Filas] = 139                             ' <filas>
        [Fswitch] = 140                           ' <fswitch>
        [Getval] = 141                            ' <getval>
        [Jslt] = 142                              ' <jslt>
        [Json] = 143                              ' <json>
        [Lenguaje] = 144                          ' <lenguaje>
        [Llajs] = 145                             ' <llaJS>
        [Llasjs] = 146                            ' <llasJS>
        [Log1] = 147                              ' <log1>
        [Log2] = 148                              ' <log2>
        [Log3] = 149                              ' <log3>
        [Numero] = 150                            ' <numero>
        [Obj] = 151                               ' <obj>
        [Objjs] = 152                             ' <objJS>
        [Objsjs] = 153                            ' <objsJS>
        [Plantilla] = 154                         ' <plantilla>
        [Proper] = 155                            ' <proper>
        [Propers] = 156                           ' <propers>
        [Rel] = 157                               ' <rel>
        [Ruta2] = 158                             ' <ruta>
        [Sentencia] = 159                         ' <sentencia>
        [Sentencias] = 160                        ' <sentencias>
        [Tipo] = 161                              ' <tipo>
        [Titulo] = 162                            ' <titulo>
        [Unitario] = 163                          ' <unitario>
        [Val] = 164                               ' <val>
        [Valasig] = 165                           ' <valAsig>
        [Var] = 166                               ' <var>
    End Enum

    Private Enum ProductionIndex
        [Lenguaje] = 0                            ' <lenguaje> ::= <json>
        [Lenguaje2] = 1                           ' <lenguaje> ::= <jslt>
        [Json_Lbrace_String_Colon_Lbrace_Rbrace_Rbrace] = 2 ' <json> ::= '{' STRING ':' '{' <objsJS> '}' '}'
        [Objsjs_Comma] = 3                        ' <objsJS> ::= <objsJS> ',' <objJS>
        [Objsjs] = 4                              ' <objsJS> ::= <objJS>
        [Objjs_String_Colon_Lbracket_Rbracket] = 5 ' <objJS> ::= STRING ':' '[' <llasJS> ']'
        [Llasjs_Comma] = 6                        ' <llasJS> ::= <llasJS> ',' <llaJS>
        [Llasjs] = 7                              ' <llasJS> ::= <llaJS>
        [Llajs_Lbrace_Rbrace] = 8                 ' <llaJS> ::= '{' <atbsJS> '}'
        [Atbsjs_Comma] = 9                        ' <atbsJS> ::= <atbsJS> ',' <atbJS>
        [Atbsjs] = 10                             ' <atbsJS> ::= <atbJS>
        [Atbjs_String_Colon_String] = 11          ' <atbJS> ::= STRING ':' STRING
        [Jslt_Ltjslcolontransformacion_Ruta_Eq_String_Version_Eq_String_Gt_Ltdivjslcolonfinalgt] = 12 ' <jslt> ::= '<jsl:transformacion' ruta '=' STRING version '=' STRING '>' <cuerpo> '</jsl:final>'
        [Cuerpo] = 13                             ' <cuerpo> ::= <declaracion> <cuerpo>
        [Cuerpo2] = 14                            ' <cuerpo> ::= <plantilla> <cuerpo>
        [Cuerpo3] = 15                            ' <cuerpo> ::= 
        [Sentencias] = 16                         ' <sentencias> ::= <sentencia> <sentencias>
        [Sentencias2] = 17                        ' <sentencias> ::= 
        [Sentencia] = 18                          ' <sentencia> ::= <declaracion>
        [Sentencia2] = 19                         ' <sentencia> ::= <asignacion>
        [Sentencia3] = 20                         ' <sentencia> ::= <aplantilla>
        [Sentencia4] = 21                         ' <sentencia> ::= <getval>
        [Sentencia5] = 22                         ' <sentencia> ::= <bfor>
        [Sentencia6] = 23                         ' <sentencia> ::= <fif>
        [Sentencia7] = 24                         ' <sentencia> ::= <fswitch>
        [Sentencia8] = 25                         ' <sentencia> ::= <etqhtml>
        [Declaracion_Ltjslcolonvariable_Eq_Id_Divgt] = 26 ' <declaracion> ::= '<jsl:variable' <tipo> '=' ID '/>'
        [Tipo_Entero] = 27                        ' <tipo> ::= entero
        [Tipo_Cadena] = 28                        ' <tipo> ::= cadena
        [Tipo_Boolean] = 29                       ' <tipo> ::= boolean
        [Tipo_Doble] = 30                         ' <tipo> ::= doble
        [Tipo_Caracter] = 31                      ' <tipo> ::= caracter
        [Asignacion_Ltjslcolonasignar_Variable_Eq_Id_Valor_Divgt] = 32 ' <asignacion> ::= '<jsl:asignar' variable '=' ID valor <valAsig> '/>'
        [Valasig_Eq] = 33                         ' <valAsig> ::= '=' <expresion>
        [Valasig_Pluseq] = 34                     ' <valAsig> ::= '+=' <expresion>
        [Valasig_Plusplus] = 35                   ' <valAsig> ::= '++'
        [Valasig_Minusminus] = 36                 ' <valAsig> ::= '--'
        [Plantilla_Ltjslcolonplantilla_Nombreobj_Eq_Gt_Ltdivjslcolonplantillagt] = 37 ' <plantilla> ::= '<jsl:plantilla' nombreObj '=' <obj> '>' <sentencias> '</jsl:plantilla>'
        [Aplantilla_Ltjslcolonplantillaminusaplicar_Seleccionar_Eq_Divgt] = 38 ' <aplantilla> ::= '<jsl:plantilla-aplicar' seleccionar '=' <obj> '/>'
        [Getval_Ltjslcolonvalorminusde_Seleccionar_Eq_Divgt] = 39 ' <getval> ::= '<jsl:valor-de' seleccionar '=' <obj> '/>'
        [Bfor_Ltjslcolonparaminuscada_Seleccionar_Eq_Gt_Ltdivjslcolonparaminuscadagt] = 40 ' <bfor> ::= '<jsl:para-cada' seleccionar '=' <obj> '>' <sentencias> '</jsl:para-cada>'
        [Fif_Ltjslcolonif_Condicion_Eq_Gt_Ltdivjslcolonifgt] = 41 ' <fif> ::= '<jsl:if' condicion '=' <expresion> '>' <sentencias> '</jsl:if>'
        [Fswitch_Ltjslcolonenminuscasogt_Ltdivjslcolonenminuscasogt] = 42 ' <fswitch> ::= '<jsl:en-caso>' <casos> '</jsl:en-caso>'
        [Casos] = 43                              ' <casos> ::= <caso> <casos>
        [Casos2] = 44                             ' <casos> ::= <defecto>
        [Casos3] = 45                             ' <casos> ::= <caso>
        [Caso_Ltjslcolonde_Condicion_Eq_Gt_Ltdivjslcolondegt] = 46 ' <caso> ::= '<jsl:de' condicion '=' <expresion> '>' <sentencias> '</jsl:de>'
        [Defecto_Ltjslcoloncualquierminusotrogt_Ltdivjslcoloncualquierminusotrogt] = 47 ' <defecto> ::= '<jsl:cualquier-otro>' <sentencias> '</jsl:cualquier-otro>'
        [Obj] = 48                                ' <obj> ::= <var>
        [Obj_Atat_Id] = 49                        ' <obj> ::= '@@' ID
        [Obj_At_Id] = 50                          ' <obj> ::= '@' ID <ruta>
        [Obj_At] = 51                             ' <obj> ::= '@'
        [Obj_Dotdot] = 52                         ' <obj> ::= '..'
        [Obj_Dot] = 53                            ' <obj> ::= '.'
        [Ruta_At_Id] = 54                         ' <ruta> ::= '@' ID <ruta>
        [Ruta_At_Id_Lbracket_Rbracket] = 55       ' <ruta> ::= '@' ID '[' <expresion> ']'
        [Ruta] = 56                               ' <ruta> ::= 
        [Var_Id_Lbracket_Rbracket] = 57           ' <var> ::= ID '[' <expresion> ']'
        [Var_Id] = 58                             ' <var> ::= ID
        [Expresion] = 59                          ' <expresion> ::= <log1>
        [Log1_Pipepipe] = 60                      ' <log1> ::= <log1> '||' <log2>
        [Log1_Exclampipepipe] = 61                ' <log1> ::= <log1> '!||' <log2>
        [Log1_Amppipe] = 62                       ' <log1> ::= <log1> '&|' <log2>
        [Log1] = 63                               ' <log1> ::= <log2>
        [Log2_Ampamp] = 64                        ' <log2> ::= <log2> '&&' <log3>
        [Log2_Exclamampamp] = 65                  ' <log2> ::= <log2> '!&&' <log3>
        [Log2] = 66                               ' <log2> ::= <log3>
        [Log3_Exclam] = 67                        ' <log3> ::= '!' <rel>
        [Log3] = 68                               ' <log3> ::= <rel>
        [Rel_Eqeq] = 69                           ' <rel> ::= <rel> '==' <arit1>
        [Rel_Exclameq] = 70                       ' <rel> ::= <rel> '!=' <arit1>
        [Rel_Amplt] = 71                          ' <rel> ::= <rel> '&lt' <arit1>
        [Rel_Amplte] = 72                         ' <rel> ::= <rel> '&lte' <arit1>
        [Rel_Ampgt] = 73                          ' <rel> ::= <rel> '&gt' <arit1>
        [Rel_Ampgte] = 74                         ' <rel> ::= <rel> '&gte' <arit1>
        [Rel] = 75                                ' <rel> ::= <arit1>
        [Arit1_Plus] = 76                         ' <arit1> ::= <arit1> '+' <arit2>
        [Arit1_Minus] = 77                        ' <arit1> ::= <arit1> '-' <arit2>
        [Arit1] = 78                              ' <arit1> ::= <arit2>
        [Arit2_Times] = 79                        ' <arit2> ::= <arit2> '*' <arit3>
        [Arit2_Div] = 80                          ' <arit2> ::= <arit2> div <arit3>
        [Arit2_Percent] = 81                      ' <arit2> ::= <arit2> '%' <arit3>
        [Arit2] = 82                              ' <arit2> ::= <arit3>
        [Arit3_Caret] = 83                        ' <arit3> ::= <arit3> '^' <unitario>
        [Arit3] = 84                              ' <arit3> ::= <unitario>
        [Unitario] = 85                           ' <unitario> ::= <getval>
        [Unitario_Exclamnulo_Id] = 86                ' <unitario> ::= '!¡' ID
        [Unitario_Plusplus_Id] = 87               ' <unitario> ::= '++' ID
        [Unitario_Minusminus_Id] = 88             ' <unitario> ::= '--' ID
        [Unitario_Id_Plusplus] = 89               ' <unitario> ::= ID '++'
        [Unitario_Id_Minusminus] = 90             ' <unitario> ::= ID '--'
        [Unitario2] = 91                          ' <unitario> ::= <val>
        [Val_Lparen_Rparen] = 92                  ' <val> ::= '(' <log1> ')'
        [Val] = 93                                ' <val> ::= <obj>
        [Val_Char] = 94                           ' <val> ::= CHAR
        [Val_String] = 95                         ' <val> ::= STRING
        [Val_Minus] = 96                          ' <val> ::= '-' <numero>
        [Val2] = 97                               ' <val> ::= <numero>
        [Val_True] = 98                           ' <val> ::= true
        [Val_False] = 99                          ' <val> ::= false
        [Numero_Int] = 100                        ' <numero> ::= INT
        [Numero_Double] = 101                     ' <numero> ::= DOUBLE
        [Etqhtml_Lthtmlgt_Ltdivhtmlgt] = 102      ' <etqhtml> ::= '<html>' <sentencias> '</html>'
        [Etqhtml_Ltbodygt_Ltdivbodygt] = 103      ' <etqhtml> ::= '<body>' <sentencias> '</body>'
        [Etqhtml_Ltheadgt_Ltdivheadgt] = 104      ' <etqhtml> ::= '<head>' <titulo> '</head>'
        [Etqhtml_Lth1gt_Ltdivh1gt] = 105          ' <etqhtml> ::= '<h1>' <sentencias> '</h1>'
        [Etqhtml_Lth2gt_Ltdivh2gt] = 106          ' <etqhtml> ::= '<h2>' <sentencias> '</h2>'
        [Etqhtml_Lth3gt_Ltdivh3gt] = 107          ' <etqhtml> ::= '<h3>' <sentencias> '</h3>'
        [Etqhtml_Lth4gt_Ltdivh4gt] = 108          ' <etqhtml> ::= '<h4>' <sentencias> '</h4>'
        [Etqhtml_Lth5gt_Ltdivh5gt] = 109          ' <etqhtml> ::= '<h5>' <sentencias> '</h5>'
        [Etqhtml_Lth6gt_Ltdivh6gt] = 110          ' <etqhtml> ::= '<h6>' <sentencias> '</h6>'
        [Etqhtml_Lttable_Ltdivtablegt] = 111      ' <etqhtml> ::= '<table' <propers> <filas> '</table>'
        [Etqhtml_Ltpgt_Ltdivpgt] = 112            ' <etqhtml> ::= '<p>' <sentencias> '</p>'
        [Etqhtml_Ltbgt_Ltdivbgt] = 113            ' <etqhtml> ::= '<b>' <sentencias> '</b>'
        [Etqhtml_Ltigt_Ltdivigt] = 114            ' <etqhtml> ::= '<i>' <sentencias> '</i>'
        [Titulo_Lttitlegt_Ltdivtitlegt] = 115     ' <titulo> ::= '<title>' <sentencias> '</title>'
        [Titulo] = 116                            ' <titulo> ::= <sentencias>
        [Filas] = 117                             ' <filas> ::= <fila> <filas>
        [Filas2] = 118                            ' <filas> ::= 
        [Fila_Lttr_Ltdivtrgt] = 119               ' <fila> ::= '<tr' <propers> <columns> '</tr>'
        [Columns] = 120                           ' <columns> ::= <column> <columns>
        [Columns2] = 121                          ' <columns> ::= 
        [Column_Ltth_Ltdivthgt] = 122             ' <column> ::= '<th' <propers> <sentencias> '</th>'
        [Column_Lttd_Ltdivtdgt] = 123             ' <column> ::= '<td' <propers> <sentencias> '</td>'
        [Propers] = 124                           ' <propers> ::= <proper> <propers>
        [Propers_Gt] = 125                        ' <propers> ::= '>'
        [Proper_Border_Eq_String] = 126           ' <proper> ::= border '=' STRING
        [Proper_Bgcolor_Eq_String] = 127          ' <proper> ::= bgcolor '=' STRING
        [Proper_Width_Eq_String] = 128            ' <proper> ::= width '=' STRING
        [Proper_Height_Eq_String] = 129           ' <proper> ::= height '=' STRING
    End Enum



    Public Program As Object     'You might derive a specific object

    Public Sub Setup()
        'This procedure can be called to load the parse tables. The class can
        'read tables using a BinaryReader.
        Parser.LoadTables(Path.Combine(Application.StartupPath, "GramaticaJslt.egt"))
    End Sub

    Public Function Parse(ByVal Reader As TextReader, ByRef camino As Boolean, ByRef rJson As PtrJson, ByRef rJsl As Nodo, ByRef dir As String) As Boolean
        'This procedure starts the GOLD Parser Engine and handles each of the
        'messages it returns. Each time a reduction is made, you can create new
        'custom object and reassign the .CurrentReduction property. Otherwise, 
        'the system will use the Reduction object that was returned.
        '
        'The resulting tree will be a pure representation of the language 
        'and will be ready to implement.

        Dim Response As GOLD.ParseMessage
        Dim Done As Boolean                  'Controls when we leave the loop
        Dim Accepted As Boolean = False      'Was the parse successful?

        Accepted = False    'Unless the program is accepted by the parser

        Parser.Open(Reader)
        Parser.TrimReductions = False  'Please read about this feature before enabling  

        Done = False
        Do Until Done
            Response = Parser.Parse()

            Select Case Response
                Case GOLD.ParseMessage.LexicalError
                    'Cannot recognize token
                    MsgBox("Error Lexico: " & Parser.CurrentToken.Data & " Fila: " & Parser.CurrentPosition.Line & ", Columna: " & Parser.CurrentPosition.Column)
                    Done = True

                Case GOLD.ParseMessage.SyntaxError
                    'Expecting a different token
                    MsgBox("Error Sintactico: " & Parser.CurrentToken.Data & " Fila: " & Parser.CurrentPosition.Line & ", Columna: " & Parser.CurrentPosition.Column)
                    Done = True

                Case GOLD.ParseMessage.Reduction
                    'Create a customized object to store the reduction
                    Parser.CurrentReduction = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.Accept
                    'Accepted!
                    'Program = Parser.CurrentReduction  'The root node!                 
                    MsgBox("Análisis exitoso")
                    camino = analisis
                    rJsl = raizJsl
                    rJson = raizJson
                    dir = direccion
                    Done = True
                    Accepted = True

                Case GOLD.ParseMessage.TokenRead
                    'You don't have to do anything here.

                Case GOLD.ParseMessage.InternalError
                    'INTERNAL ERROR! Something is horribly wrong.
                    Done = True

                Case GOLD.ParseMessage.NotLoadedError
                    'This error occurs if the CGT was not loaded.                   
                    Done = True

                Case GOLD.ParseMessage.GroupError
                    'COMMENT ERROR! Unexpected end of file
                    Done = True
            End Select
        Loop

        Return Accepted
    End Function

    Private Function CreateNewObject(Reduction As GOLD.Reduction) As Object
        Dim Result As Object = Nothing
        Dim nodo As Nodo = New Nodo
        Dim ptr As PtrJson = New PtrJson
        Dim lista As ArrayList = New ArrayList

        With Reduction
            Select Case .Parent.TableIndex
                Case ProductionIndex.Lenguaje
                    ' <lenguaje> ::= <json> 

                Case ProductionIndex.Lenguaje2
                    ' <lenguaje> ::= <jslt> 

           Case ProductionIndex.Json_Lbrace_String_Colon_Lbrace_Rbrace_Rbrace                 
                    ' <json> ::= '{' STRING ':' '{' <objsJS> '}' '}' 
                    analisis = False
                    raizJson = New PtrJson
                    raizJson = raizJson.crearJSon(Constantes.R_JSRAIZ, .Item(1).Data.ToString.Replace("""", ""), .Item(1).Position.Line, .Item(1).Position.Column, CType(.Item(4).Data, ArrayList))

                Case ProductionIndex.Objsjs_Comma
                    ' <objsJS> ::= <objsJS> ',' <objJS> 
                    ptr = New PtrJson
                    ptr = CType(.Item(2).Data, PtrJson)
                    lista = New ArrayList
                    lista = CType(.Item(0).Data, ArrayList)
                    lista.Add(ptr)
                    Return lista

                Case ProductionIndex.Objsjs
                    ' <objsJS> ::= <objJS> 
                    ptr = New PtrJson
                    ptr = CType(.Item(0).Data, PtrJson)
                    lista = New ArrayList
                    lista = ptr.generarList(ptr)
                    Return lista

                Case ProductionIndex.Objjs_String_Colon_Lbracket_Rbracket
                    ' <objJS> ::= STRING ':' '[' <llasJS> ']' 
                    ptr = New PtrJson
                    ptr = ptr.crearJSon(Constantes.R_JSOBJ, .Item(0).Data.ToString.Replace("""", ""), .Item(0).Position.Line, .Item(0).Position.Column, CType(.Item(3).Data, ArrayList))
                    Return ptr

                Case ProductionIndex.Llasjs_Comma
                    ' <llasJS> ::= <llasJS> ',' <llaJS> 
                    ptr = New PtrJson
                    ptr = CType(.Item(2).Data, PtrJson)
                    lista = New ArrayList
                    lista = CType(.Item(0).Data, ArrayList)
                    lista.Add(ptr)
                    Return lista

                Case ProductionIndex.Llasjs
                    ' <llasJS> ::= <llaJS> 
                    ptr = New PtrJson
                    ptr = CType(.Item(0).Data, PtrJson)
                    lista = New ArrayList
                    lista = ptr.generarList(ptr)
                    Return lista

                Case ProductionIndex.Llajs_Lbrace_Rbrace
                    ' <llaJS> ::= '{' <atbsJS> '}' 
                    ptr = New PtrJson
                    ptr = ptr.crearJSon(Constantes.R_JSCOLL, "{}", .Item(0).Position.Line, .Item(0).Position.Column, CType(.Item(1).Data, ArrayList))
                    Return ptr

                Case ProductionIndex.Atbsjs_Comma
                    ' <atbsJS> ::= <atbsJS> ',' <atbJS> 
                    ptr = New PtrJson
                    ptr = CType(.Item(2).Data, PtrJson)
                    lista = New ArrayList
                    lista = CType(.Item(0).Data, ArrayList)
                    lista.Add(ptr)
                    Return lista

                Case ProductionIndex.Atbsjs
                    ' <atbsJS> ::= <atbJS> 
                    ptr = New PtrJson
                    ptr = CType(.Item(0).Data, PtrJson)
                    lista = New ArrayList
                    lista = ptr.generarList(ptr)
                    Return lista

                Case ProductionIndex.Atbjs_String_Colon_String
                    ' <atbJS> ::= STRING ':' STRING 
                    ptr = New PtrJson
                    ptr = ptr.crearAtri(.Item(0).Data.ToString.Replace("""", ""), .Item(2).Data.ToString.Replace("""", ""), .Item(0).Position.Line, .Item(0).Position.Column)
                    Return ptr

                Case ProductionIndex.Jslt_Ltjslcolontransformacion_Ruta_Eq_String_Version_Eq_String_Gt_Ltdivjslcolonfinalgt
                    ' <jslt> ::= '<jsl:transformacion' ruta '=' STRING version '=' STRING '>' <cuerpo> '</jsl:final>' 
                    analisis = True
                    direccion = .Item(3).Data.ToString.Replace("""", "")
                    raizJsl = New Nodo
                    raizJsl = raizJsl.crearJSL(Constantes.SR_TRANSFORM, .Item(6).Data.ToString.Replace("""", ""), .Item(6).Position.Line, .Item(6).Position.Column, CType(.Item(8).Data, ArrayList))

                Case ProductionIndex.Cuerpo
                    ' <cuerpo> ::= <declaracion> <cuerpo> 
                    lista = New ArrayList
                    lista = CType(.Item(1).Data, ArrayList)
                    lista.Insert(0, CType(.Item(0).Data, Nodo))
                    Return lista

                Case ProductionIndex.Cuerpo2
                    ' <cuerpo> ::= <plantilla> <cuerpo> 
                    lista = New ArrayList
                    lista = CType(.Item(1).Data, ArrayList)
                    lista.Insert(0, CType(.Item(0).Data, Nodo))
                    Return lista

                Case ProductionIndex.Cuerpo3
                    ' <cuerpo> ::=  
                    lista = New ArrayList
                    Return lista

                Case ProductionIndex.Sentencias
                    ' <sentencias> ::= <sentencia> <sentencias> 
                    lista = New ArrayList
                    lista = CType(.Item(1).Data, ArrayList)
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    lista.Insert(0, nodo)
                    Return lista

                Case ProductionIndex.Sentencias2
                    ' <sentencias> ::=  
                    lista = New ArrayList
                    Return lista

                Case ProductionIndex.Sentencia
                    ' <sentencia> ::= <declaracion> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia2
                    ' <sentencia> ::= <asignacion> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia3
                    ' <sentencia> ::= <aplantilla> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia4
                    ' <sentencia> ::= <getval> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia5
                    ' <sentencia> ::= <bfor> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia6
                    ' <sentencia> ::= <fif> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia7
                    ' <sentencia> ::= <fswitch> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Sentencia8
                    ' <sentencia> ::= <etqhtml> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Declaracion_Ltjslcolonvariable_Eq_Id_Divgt
                    ' <declaracion> ::= '<jsl:variable' <tipo> '=' ID '/>' 
                    nodo = New Nodo
                    Return nodo.crearDeclare(CType(.Item(1).Data, Integer), .Item(3).Data.ToString, .Item(3).Position.Line, .Item(3).Position.Column)

                Case ProductionIndex.Tipo_Entero
                    ' <tipo> ::= entero 
                    Return Constantes.T_ENTERO

                Case ProductionIndex.Tipo_Cadena
                    ' <tipo> ::= cadena 
                    Return Constantes.T_CADENA

                Case ProductionIndex.Tipo_Boolean
                    ' <tipo> ::= boolean 
                    Return Constantes.T_BOOLEAN

                Case ProductionIndex.Tipo_Doble
                    ' <tipo> ::= doble 
                    Return Constantes.T_DOBLE

                Case ProductionIndex.Tipo_Caracter
                    ' <tipo> ::= caracter 
                    Return Constantes.T_CARACTER

                Case ProductionIndex.Asignacion_Ltjslcolonasignar_Variable_Eq_Id_Valor_Divgt
                    ' <asignacion> ::= '<jsl:asignar' variable '=' ID valor <valAsig> '/>' 
                    nodo = New Nodo
                    nodo = CType(.Item(5).Data, Nodo)
                    nodo.fila = .Item(3).Position.Line
                    nodo.column = .Item(3).Position.Column
                    nodo.cad = .Item(3).Data.ToString
                    Return nodo

                Case ProductionIndex.Valasig_Eq
                    ' <valAsig> ::= '=' <expresion> 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_ASIG, CType(.Item(1).Data, Nodo))

                Case ProductionIndex.Valasig_Pluseq
                    ' <valAsig> ::= '+=' <expresion> 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_CONCAT, CType(.Item(1).Data, Nodo))

                Case ProductionIndex.Valasig_Plusplus
                    ' <valAsig> ::= '++' 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_POS_INC)

                Case ProductionIndex.Valasig_Minusminus
                    ' <valAsig> ::= '--' 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_POS_DEC)

                Case ProductionIndex.Plantilla_Ltjslcolonplantilla_Nombreobj_Eq_Gt_Ltdivjslcolonplantillagt
                    ' <plantilla> ::= '<jsl:plantilla' nombreObj '=' <obj> '>' <sentencias> '</jsl:plantilla>' 
                    nodo = New Nodo
                    nodo = nodo.crearJSL(Constantes.SR_PLANTILLA, "Plantilla", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(5).Data, ArrayList))
                    nodo.pred(CType(.Item(3).Data, Nodo))
                    Return nodo

                Case ProductionIndex.Aplantilla_Ltjslcolonplantillaminusaplicar_Seleccionar_Eq_Divgt
                    ' <aplantilla> ::= '<jsl:plantilla-aplicar' seleccionar '=' <obj> '/>' 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_APLANTILLA, "Plantilla-aplicar", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(3).Data, Nodo))

                Case ProductionIndex.Getval_Ltjslcolonvalorminusde_Seleccionar_Eq_Divgt
                    ' <getval> ::= '<jsl:valor-de' seleccionar '=' <obj> '/>' 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_GETVAL, "Valor-de", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(3).Data, Nodo))

                Case ProductionIndex.Bfor_Ltjslcolonparaminuscada_Seleccionar_Eq_Gt_Ltdivjslcolonparaminuscadagt
                    ' <bfor> ::= '<jsl:para-cada' seleccionar '=' <obj> '>' <sentencias> '</jsl:para-cada>' 
                    nodo = New Nodo
                    nodo = nodo.crearJSL(Constantes.SR_FOR, "Para-cada", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(5).Data, ArrayList))
                    nodo.pred(CType(.Item(3).Data, Nodo))
                    Return nodo

                Case ProductionIndex.Fif_Ltjslcolonif_Condicion_Eq_Gt_Ltdivjslcolonifgt
                    ' <fif> ::= '<jsl:if' condicion '=' <expresion> '>' <sentencias> '</jsl:if>' 
                    nodo = New Nodo
                    nodo = nodo.crearJSL(Constantes.SR_IF, "If", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(5).Data, ArrayList))
                    nodo.pred(CType(.Item(3).Data, Nodo))
                    Return nodo

                Case ProductionIndex.Fswitch_Ltjslcolonenminuscasogt_Ltdivjslcolonenminuscasogt
                    ' <fswitch> ::= '<jsl:en-caso>' <casos> '</jsl:en-caso>' 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_SWITCH, "En-caso", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Casos
                    ' <casos> ::= <caso> <casos> 
                    lista = New ArrayList
                    lista = CType(.Item(1).Data, ArrayList)
                    lista.Insert(0, CType(.Item(0).Data, Nodo))
                    Return lista

                Case ProductionIndex.Casos2
                    ' <casos> ::= <defecto> 
                    lista = New ArrayList
                    lista.Add(CType(.Item(0).Data, Nodo))
                    Return lista

                Case ProductionIndex.Casos3
                    ' <casos> ::= <caso> 
                    lista = New ArrayList
                    lista.Add(CType(.Item(0).Data, Nodo))
                    Return lista
                    
                Case ProductionIndex.Caso_Ltjslcolonde_Condicion_Eq_Gt_Ltdivjslcolondegt
                    ' <caso> ::= '<jsl:de' condicion '=' <expresion> '>' <sentencias> '</jsl:de>' 
                    nodo = New Nodo
                    nodo = nodo.crearJSL(Constantes.SR_CASO, "De", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(5).Data, ArrayList))
                    nodo.pred(CType(.Item(3).Data, Nodo))
                    Return nodo

                Case ProductionIndex.Defecto_Ltjslcoloncualquierminusotrogt_Ltdivjslcoloncualquierminusotrogt
                    ' <defecto> ::= '<jsl:cualquier-otro>' <sentencias> '</jsl:cualquier-otro>' 
                    nodo = New Nodo
                    Return nodo.crearJSL(Constantes.SR_DEFAULT, "Cualquier-otro", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Obj                 
                    ' <obj> ::= <var> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Obj_Atat_Id
                    ' <obj> ::= '@@' ID 
                    nodo = New Nodo
                    nodo = nodo.crearAcceso(Constantes.SR_COLLECTION, .Item(1).Data.ToString, .Item(1).Position.Line, .Item(1).Position.Column)
                    Return nodo

                Case ProductionIndex.Obj_At_Id
                    ' <obj> ::= '@' ID <ruta> 
                    Dim var As Nodo = New Nodo
                    var = var.crearAcceso(Constantes.SR_VAR, .Item(1).Data.ToString, .Item(1).Position.Line, .Item(1).Position.Column)
                    nodo = New Nodo
                    nodo = CType(.Item(2).Data, Nodo)
                    nodo.pred(var)
                    Return nodo

                Case ProductionIndex.Obj_At
                    ' <obj> ::= '@' 
                    nodo = New Nodo
                    nodo = nodo.crearAcceso(Constantes.SR_RAIZ, .Item(0).Data.ToString, .Item(0).Position.Line, .Item(0).Position.Column)
                    Return nodo

                Case ProductionIndex.Obj_Dotdot
                    ' <obj> ::= '..' 
                    nodo = New Nodo
                    nodo = nodo.crearAcceso(Constantes.SR_PADRE, .Item(0).Data.ToString, .Item(0).Position.Line, .Item(0).Position.Column)
                    Return nodo

                Case ProductionIndex.Obj_Dot
                    ' <obj> ::= '.' 
                    nodo = New Nodo
                    nodo = nodo.crearAcceso(Constantes.SR_ACTUAL, .Item(0).Data.ToString, .Item(0).Position.Line, .Item(0).Position.Column)
                    Return nodo

                Case ProductionIndex.Ruta_At_Id
                    ' <ruta> ::= '@' ID <ruta> 
                    Dim var As Nodo = New Nodo
                    var = var.crearAcceso(Constantes.SR_VAR, .Item(1).Data.ToString, .Item(1).Position.Line, .Item(1).Position.Column)
                    nodo = New Nodo
                    nodo = CType(.Item(2).Data, Nodo)
                    nodo.pred(var)
                    Return nodo

                Case ProductionIndex.Ruta_At_Id_Lbracket_Rbracket
                    ' <ruta> ::= '@' ID '[' <expresion> ']' 
                    Dim arr As Nodo = New Nodo
                    arr = arr.crearAcceso(Constantes.SR_ARR, .Item(1).Data.ToString, .Item(1).Position.Line, .Item(1).Position.Column)
                    arr.add(CType(.Item(3).Data, Nodo))
                    nodo = New Nodo
                    nodo = nodo.crearAcceso()
                    nodo.add(arr)
                    Return nodo

                Case ProductionIndex.Ruta
                    ' <ruta> ::=  
                    nodo = New Nodo
                    nodo = nodo.crearAcceso()
                    Return nodo

                Case ProductionIndex.Var_Id_Lbracket_Rbracket
                    ' <var> ::= ID '[' <expresion> ']' 
                    nodo = New Nodo
                    nodo = nodo.crearAcceso(Constantes.SR_ARR, .Item(0).Data.ToString, .Item(0).Position.Line, .Item(0).Position.Column)
                    nodo.add(CType(.Item(2).Data, Nodo))
                    Return nodo

                Case ProductionIndex.Var_Id
                    ' <var> ::= ID 
                    nodo = New Nodo
                    nodo = nodo.crearAcceso(Constantes.SR_VAR, .Item(0).Data.ToString, .Item(0).Position.Line, .Item(0).Position.Column)
                    Return nodo

                Case ProductionIndex.Expresion
                    ' <expresion> ::= <log1> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Log1_Pipepipe
                    ' <log1> ::= <log1> '||' <log2> 
                    nodo = New Nodo
                    Return nodo.crearLogica(Constantes.SR_OR, "||", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Log1_Exclampipepipe
                    ' <log1> ::= <log1> '!||' <log2> 
                    nodo = New Nodo
                    Return nodo.crearLogica(Constantes.SR_NOR, "!||", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Log1_Amppipe
                    ' <log1> ::= <log1> '&|' <log2> 
                    nodo = New Nodo
                    Return nodo.crearLogica(Constantes.SR_XOR, "&|", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Log1
                    ' <log1> ::= <log2> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Log2_Ampamp
                    ' <log2> ::= <log2> '&&' <log3> 
                    nodo = New Nodo
                    Return nodo.crearLogica(Constantes.SR_AND, "&&", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Log2_Exclamampamp
                    ' <log2> ::= <log2> '!&&' <log3> 
                    nodo = New Nodo
                    Return nodo.crearLogica(Constantes.SR_NAND, "!&&", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Log2
                    ' <log2> ::= <log3> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Log3_Exclam
                    ' <log3> ::= '!' <rel> 
                    nodo = New Nodo
                    Return nodo.crearLogica(Constantes.SR_NOT, "!", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, Nodo))

                Case ProductionIndex.Log3
                    ' <log3> ::= <rel> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Rel_Eqeq
                    ' <rel> ::= <rel> '==' <arit1> 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_IGUAL, "==", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Rel_Exclameq
                    ' <rel> ::= <rel> '!=' <arit1> 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_DIFERENTE, "!=", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Rel_Amplt
                    ' <rel> ::= <rel> '&lt' <arit1> 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_MENOR, "&lt", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Rel_Amplte
                    ' <rel> ::= <rel> '&lte' <arit1> 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_MENOR_IGUAL, "&lte", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Rel_Ampgt
                    ' <rel> ::= <rel> '&gt' <arit1> 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_MAYOR, "&gt", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Rel_Ampgte
                    ' <rel> ::= <rel> '&gte' <arit1> 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_MAYOR_IGUAL, "&gte", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Rel
                    ' <rel> ::= <arit1> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Arit1_Plus
                    ' <arit1> ::= <arit1> '+' <arit2> 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_SUM, "+", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Arit1_Minus
                    ' <arit1> ::= <arit1> '-' <arit2> 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_SUB, "-", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Arit1
                    ' <arit1> ::= <arit2> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Arit2_Times
                    ' <arit2> ::= <arit2> '*' <arit3> 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_MUL, "*", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Arit2_Div
                    ' <arit2> ::= <arit2> div <arit3> 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_DIV, "/", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Arit2_Percent
                    ' <arit2> ::= <arit2> '%' <arit3> 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_MOD, "%", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Arit2
                    ' <arit2> ::= <arit3> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Arit3_Caret
                    ' <arit3> ::= <arit3> '^' <unitario> 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_POW, "^", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(0).Data, Nodo), CType(.Item(2).Data, Nodo))

                Case ProductionIndex.Arit3
                    ' <arit3> ::= <unitario> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Unitario
                    ' <unitario> ::= <getval> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Unitario_Exclamnulo_Id
                    ' <unitario> ::= '!¡' ID 
                    nodo = New Nodo
                    Return nodo.crearRelacional(Constantes.SR_NULO, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Unitario_Plusplus_Id
                    ' <unitario> ::= '++' ID 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_PRE_INC, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Unitario_Minusminus_Id
                    ' <unitario> ::= '--' ID 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_PRE_DEC, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Unitario_Id_Plusplus
                    ' <unitario> ::= ID '++' 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_POS_INC, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Unitario_Id_Minusminus
                    ' <unitario> ::= ID '--' 
                    nodo = New Nodo
                    Return nodo.crearAritmetica(Constantes.SR_POS_DEC, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Unitario2
                    ' <unitario> ::= <val> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Val_Lparen_Rparen
                    ' <val> ::= '(' <log1> ')' 
                    nodo = New Nodo
                    nodo = CType(.Item(1).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Val
                    ' <val> ::= <obj> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Val_Char
                    ' <val> ::= CHAR 
                    nodo = New Nodo
                    Return nodo.crearOperador(Constantes.SR_CARACTER, Constantes.T_CARACTER, .Item(0).Data.ToString.Replace("'", ""), Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Val_String
                    ' <val> ::= STRING 
                    nodo = New Nodo
                    Return nodo.crearOperador(Constantes.SR_CADENA, Constantes.T_CADENA, .Item(0).Data.ToString.Replace("""", ""), Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Val_Minus
                    ' <val> ::= '-' <numero> 
                    nodo = New Nodo
                    nodo = CType(.Item(1).Data, Nodo)
                    nodo.cad = "-" + nodo.cad
                    Return nodo

                Case ProductionIndex.Val2
                    ' <val> ::= <numero> 
                    nodo = New Nodo
                    nodo = CType(.Item(0).Data, Nodo)
                    Return nodo

                Case ProductionIndex.Val_True
                    ' <val> ::= true 
                    nodo = New Nodo
                    Return nodo.crearOperador(Constantes.SR_BOOLEAN, Constantes.T_BOOLEAN, "true", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Val_False
                    ' <val> ::= false 
                    nodo = New Nodo
                    Return nodo.crearOperador(Constantes.SR_BOOLEAN, Constantes.T_BOOLEAN, "false", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Numero_Int
                    ' <numero> ::= INT 
                    nodo = New Nodo
                    Return nodo.crearOperador(Constantes.SR_ENTERO, Constantes.T_ENTERO, .Item(0).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Numero_Double
                    ' <numero> ::= DOUBLE 
                    nodo = New Nodo
                    Return nodo.crearOperador(Constantes.SR_DOBLE, Constantes.T_DOBLE, .Item(0).Data.ToString.Replace(".", ","), Parser.CurrentPosition.Line, Parser.CurrentPosition.Column)

                Case ProductionIndex.Etqhtml_Lthtmlgt_Ltdivhtmlgt
                    ' <etqhtml> ::= '<html>' <sentencias> '</html>' 
                    nodo = New Nodo
                    nodo = nodo.crearHTML(Constantes.SR_HTML, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))
                    Return nodo

                Case ProductionIndex.Etqhtml_Ltbodygt_Ltdivbodygt
                    ' <etqhtml> ::= '<body>' <sentencias> '</body>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_BODY, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Ltheadgt_Ltdivheadgt
                    ' <etqhtml> ::= '<head>' <titulo> '</head>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_HEAD, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lth1gt_Ltdivh1gt
                    ' <etqhtml> ::= '<h1>' <sentencias> '</h1>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_H1, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lth2gt_Ltdivh2gt
                    ' <etqhtml> ::= '<h2>' <sentencias> '</h2>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_H2, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lth3gt_Ltdivh3gt
                    ' <etqhtml> ::= '<h3>' <sentencias> '</h3>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_H3, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lth4gt_Ltdivh4gt
                    ' <etqhtml> ::= '<h4>' <sentencias> '</h4>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_H4, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lth5gt_Ltdivh5gt
                    ' <etqhtml> ::= '<h5>' <sentencias> '</h5>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_H5, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lth6gt_Ltdivh6gt
                    ' <etqhtml> ::= '<h6>' <sentencias> '</h6>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_H6, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Lttable_Ltdivtablegt
                    ' <etqhtml> ::= '<table' <propers> <filas> '</table>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_TABLE, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(2).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Ltpgt_Ltdivpgt
                    ' <etqhtml> ::= '<p>' <sentencias> '</p>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_P, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Ltbgt_Ltdivbgt
                    ' <etqhtml> ::= '<b>' <sentencias> '</b>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_B, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Etqhtml_Ltigt_Ltdivigt
                    ' <etqhtml> ::= '<i>' <sentencias> '</i>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_I, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))

                Case ProductionIndex.Titulo_Lttitlegt_Ltdivtitlegt
                    ' <titulo> ::= '<title>' <sentencias> '</title>' 
                    nodo = New Nodo
                    nodo = nodo.crearHTML(Constantes.SR_TITLE, "", Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(1).Data, ArrayList))
                    lista = New ArrayList
                    lista.Add(nodo)
                    Return lista

                Case ProductionIndex.Titulo
                    ' <titulo> ::= <sentencias> 
                    lista = New ArrayList
                    lista = CType(.Item(0).Data, ArrayList)
                    Return lista

                Case ProductionIndex.Filas
                    ' <filas> ::= <fila> <filas> 
                    lista = New ArrayList
                    lista = CType(.Item(1).Data, ArrayList)
                    lista.Insert(0, CType(.Item(0).Data, Nodo))
                    Return lista

                Case ProductionIndex.Filas2
                    ' <filas> ::=  
                    lista = New ArrayList
                    Return lista

                Case ProductionIndex.Fila_Lttr_Ltdivtrgt
                    ' <fila> ::= '<tr' <propers> <columns> '</tr>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_TR, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(2).Data, ArrayList))

                Case ProductionIndex.Columns
                    ' <columns> ::= <column> <columns> 
                    lista = New ArrayList
                    lista = CType(.Item(1).Data, ArrayList)
                    lista.Insert(0, CType(.Item(0).Data, Nodo))
                    Return lista

                Case ProductionIndex.Columns2
                    ' <columns> ::=  
                    lista = New ArrayList
                    Return lista

                Case ProductionIndex.Column_Ltth_Ltdivthgt
                    ' <column> ::= '<th' <propers> <sentencias> '</th>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_TH, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(2).Data, ArrayList))

                Case ProductionIndex.Column_Lttd_Ltdivtdgt
                    ' <column> ::= '<td' <propers> <sentencias> '</td>' 
                    nodo = New Nodo
                    Return nodo.crearHTML(Constantes.SR_TD, .Item(1).Data.ToString, Parser.CurrentPosition.Line, Parser.CurrentPosition.Column, CType(.Item(2).Data, ArrayList))

                Case ProductionIndex.Propers
                    ' <propers> ::= <proper> <propers> 
                    Return .Item(0).Data.ToString + " " + .Item(1).Data.ToString

                Case ProductionIndex.Propers_Gt
                    ' <propers> ::= '>' 
                    Return ">"

                Case ProductionIndex.Proper_Border_Eq_String
                    ' <proper> ::= border '=' STRING 
                    Return "border=" + .Item(2).Data.ToString

                Case ProductionIndex.Proper_Bgcolor_Eq_String
                    ' <proper> ::= bgcolor '=' STRING 
                    Return "bgcolor=" + .Item(2).Data.ToString

                Case ProductionIndex.Proper_Width_Eq_String
                    ' <proper> ::= width '=' STRING 
                    Return "width=" + .Item(2).Data.ToString

                Case ProductionIndex.Proper_Height_Eq_String
                    ' <proper> ::= height '=' STRING 
                    Return "height=" + .Item(2).Data.ToString

            End Select
        End With

        Return Result
    End Function
End Module
